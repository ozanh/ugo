// Code generated by 'go generate'; DO NOT EDIT.

package stdlib

import (
	"strconv"

	"github.com/ozanh/ugo"
)

// FuncPORO is a generated function to make ugo.CallableFunc.
// Source: func(o ugo.Object) (ret ugo.Object)
func FuncPORO(fn func(ugo.Object) ugo.Object) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 1 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=1 got=" + strconv.Itoa(len(args)))
		}

		o := args[0]

		ret = fn(o)
		return
	}
}

// FuncPiRO is a generated function to make ugo.CallableFunc.
// Source: func(i1 int) (ret ugo.Object)
func FuncPiRO(fn func(int) ugo.Object) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 1 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=1 got=" + strconv.Itoa(len(args)))
		}

		i1, ok := ugo.ToGoInt(args[0])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("1st", "int", args[0].TypeName())
		}

		ret = fn(i1)
		return
	}
}

// FuncPi64RO is a generated function to make ugo.CallableFunc.
// Source: func(i1 int64) (ret ugo.Object)
func FuncPi64RO(fn func(int64) ugo.Object) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 1 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=1 got=" + strconv.Itoa(len(args)))
		}

		i1, ok := ugo.ToGoInt64(args[0])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("1st", "int", args[0].TypeName())
		}

		ret = fn(i1)
		return
	}
}

// FuncPi64R is a generated function to make ugo.CallableFunc.
// Source: func(i1 int64)
func FuncPi64R(fn func(int64)) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 1 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=1 got=" + strconv.Itoa(len(args)))
		}

		i1, ok := ugo.ToGoInt64(args[0])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("1st", "int", args[0].TypeName())
		}

		fn(i1)
		ret = ugo.Undefined
		return
	}
}

// FuncPsROe is a generated function to make ugo.CallableFunc.
// Source: func(s string) (ret ugo.Object, err error)
func FuncPsROe(fn func(string) (ugo.Object, error)) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 1 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=1 got=" + strconv.Itoa(len(args)))
		}

		s, ok := ugo.ToGoString(args[0])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("1st", "string", args[0].TypeName())
		}

		ret, err = fn(s)
		return
	}
}

// FuncPsiRO is a generated function to make ugo.CallableFunc.
// Source: func(s string, i1 int) (ret ugo.Object)
func FuncPsiRO(fn func(string, int) ugo.Object) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 2 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=2 got=" + strconv.Itoa(len(args)))
		}

		s, ok := ugo.ToGoString(args[0])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("1st", "string", args[0].TypeName())
		}
		i1, ok := ugo.ToGoInt(args[1])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("2nd", "int", args[1].TypeName())
		}

		ret = fn(s, i1)
		return
	}
}

// FuncPRO is a generated function to make ugo.CallableFunc.
// Source: func() (ret ugo.Object)
func FuncPRO(fn func() ugo.Object) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 0 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=0 got=" + strconv.Itoa(len(args)))
		}

		ret = fn()
		return
	}
}

// FuncPi64i64RO is a generated function to make ugo.CallableFunc.
// Source: func(i1 int64, i2 int64) (ret ugo.Object)
func FuncPi64i64RO(fn func(int64, int64) ugo.Object) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 2 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=2 got=" + strconv.Itoa(len(args)))
		}

		i1, ok := ugo.ToGoInt64(args[0])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("1st", "int", args[0].TypeName())
		}
		i2, ok := ugo.ToGoInt64(args[1])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("2nd", "int", args[1].TypeName())
		}

		ret = fn(i1, i2)
		return
	}
}

// FuncPb2RO is a generated function to make ugo.CallableFunc.
// Source: func(b []byte) (ret ugo.Object)
func FuncPb2RO(fn func([]byte) ugo.Object) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 1 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=1 got=" + strconv.Itoa(len(args)))
		}

		b, ok := ugo.ToGoByteSlice(args[0])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("1st", "bytes", args[0].TypeName())
		}

		ret = fn(b)
		return
	}
}

// FuncPOssRO is a generated function to make ugo.CallableFunc.
// Source: func(o ugo.Object, s1 string, s2 string) (ret ugo.Object)
func FuncPOssRO(fn func(ugo.Object, string, string) ugo.Object) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 3 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=3 got=" + strconv.Itoa(len(args)))
		}

		o := args[0]
		s1, ok := ugo.ToGoString(args[1])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("2nd", "string", args[1].TypeName())
		}
		s2, ok := ugo.ToGoString(args[2])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("3rd", "string", args[2].TypeName())
		}

		ret = fn(o, s1, s2)
		return
	}
}

// FuncPb2bRO is a generated function to make ugo.CallableFunc.
// Source: func(p []byte, b bool) (ret ugo.Object)
func FuncPb2bRO(fn func([]byte, bool) ugo.Object) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 2 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=2 got=" + strconv.Itoa(len(args)))
		}

		p, ok := ugo.ToGoByteSlice(args[0])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("1st", "bytes", args[0].TypeName())
		}
		b, ok := ugo.ToGoBool(args[1])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("2nd", "bool", args[1].TypeName())
		}

		ret = fn(p, b)
		return
	}
}

// FuncPb2ssRO is a generated function to make ugo.CallableFunc.
// Source: func(p []byte, s1 string, s2 string) (ret ugo.Object)
func FuncPb2ssRO(fn func([]byte, string, string) ugo.Object) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 3 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=3 got=" + strconv.Itoa(len(args)))
		}

		p, ok := ugo.ToGoByteSlice(args[0])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("1st", "bytes", args[0].TypeName())
		}
		s1, ok := ugo.ToGoString(args[1])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("2nd", "string", args[1].TypeName())
		}
		s2, ok := ugo.ToGoString(args[2])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("3rd", "string", args[2].TypeName())
		}

		ret = fn(p, s1, s2)
		return
	}
}

// FuncPssRO is a generated function to make ugo.CallableFunc.
// Source: func(s1 string, s2 string) (ret ugo.Object)
func FuncPssRO(fn func(string, string) ugo.Object) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 2 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=2 got=" + strconv.Itoa(len(args)))
		}

		s1, ok := ugo.ToGoString(args[0])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("1st", "string", args[0].TypeName())
		}
		s2, ok := ugo.ToGoString(args[1])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("2nd", "string", args[1].TypeName())
		}

		ret = fn(s1, s2)
		return
	}
}

// FuncPsRO is a generated function to make ugo.CallableFunc.
// Source: func(s string) (ret ugo.Object)
func FuncPsRO(fn func(string) ugo.Object) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 1 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=1 got=" + strconv.Itoa(len(args)))
		}

		s, ok := ugo.ToGoString(args[0])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("1st", "string", args[0].TypeName())
		}

		ret = fn(s)
		return
	}
}

// FuncPsrRO is a generated function to make ugo.CallableFunc.
// Source: func(s string, r rune) (ret ugo.Object)
func FuncPsrRO(fn func(string, rune) ugo.Object) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 2 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=2 got=" + strconv.Itoa(len(args)))
		}

		s, ok := ugo.ToGoString(args[0])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("1st", "string", args[0].TypeName())
		}
		r, ok := ugo.ToGoRune(args[1])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("2nd", "char", args[1].TypeName())
		}

		ret = fn(s, r)
		return
	}
}

// FuncPAsRO is a generated function to make ugo.CallableFunc.
// Source: func(arr ugo.Array, s string) (ret ugo.Object)
func FuncPAsRO(fn func(ugo.Array, string) ugo.Object) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 2 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=2 got=" + strconv.Itoa(len(args)))
		}

		arr, ok := ugo.ToArray(args[0])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("1st", "array", args[0].TypeName())
		}
		s, ok := ugo.ToGoString(args[1])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("2nd", "string", args[1].TypeName())
		}

		ret = fn(arr, s)
		return
	}
}

// FuncPOi64ROe is a generated function to make ugo.CallableFunc.
// Source: func(o ugo.Object, i int64) (ret ugo.Object, err error)
func FuncPOi64ROe(fn func(ugo.Object, int64) (ugo.Object, error)) ugo.CallableFunc {
	return func(args ...ugo.Object) (ret ugo.Object, err error) {
		if len(args) != 2 {
			return ugo.Undefined, ugo.ErrWrongNumArguments.NewError("want=2 got=" + strconv.Itoa(len(args)))
		}

		o := args[0]
		i, ok := ugo.ToGoInt64(args[1])
		if !ok {
			return ugo.Undefined, ugo.NewArgumentTypeError("2nd", "int", args[1].TypeName())
		}

		ret, err = fn(o, i)
		return
	}
}
